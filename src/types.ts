// src/types.ts

// ====== Configuration ======
export interface FloosakClientConfig {
  baseUrl: string;
  phone: string;
  shortCode: string;
  token?: string; // Optional: provide an existing token to skip auth
}

// ====== Generic Types ======
export interface LanguagePair {
  en: string;
  ar: string;
}

export interface BaseResponse {
  message: string;
  is_success: boolean;
}

// ====== Auth API Types ======
export interface RequestKeyPayload {
  phone: string;
  short_code: string;
}

export interface RequestKeyResponse {
  message: string;
  request_id: number;
  name: string | null;
}

export interface VerifyKeyPayload {
  request_id: number | string;
  otp: string;
}

export interface VerifyKeyResponse {
  message: string;
  key: string; // This is the JWT Bearer Token
  account_detail: {
    account: {
      id: number;
      email: string | null;
      phone: string;
      gender: LanguagePair;
      kyc: {
        first_name: string;
        father_name: string;
        grand_father_name: string;
        family_name: string;
      };
      wallets: {
        id: number;
        currency: {
          id: number;
          name: LanguagePair;
          symbol: LanguagePair;
        };
        balance: number;
      }[];
    };
  };
}

// ====== P2MCL (Payment) API Types ======
export interface PurchaseRequestPayload {
  source_wallet_id: number;
  request_id: string; // Unique ID generated by the merchant
  target_phone: string;
  amount: number;
  purpose: string;
}

export interface PurchaseConfirmPayload {
  purchase_id: number;
  otp: string;
}

export interface RefundPayload {
  transaction_id: number; // This is the `id` from a completed purchase
  request_id: string; // A new unique ID for the refund request
  amount: number;
}

export interface TransactionData {
  name: string;
  balance: number;
  phone: string;
  status: LanguagePair;
  net: number;
  fee: number;
  rate: number;
  gross: number;
  reference_id: string;
  id: number; // This is the purchase_id or transaction_id
  created_at: string;
}

export interface TransactionResponse extends BaseResponse {
  data: TransactionData;
}

// For consistency, let's assume the RefundResponse has a similar structure
export interface RefundResponse extends BaseResponse {
  data?: any; // The PDF does not specify the refund response data structure
}